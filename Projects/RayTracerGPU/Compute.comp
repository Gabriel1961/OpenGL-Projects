#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f,binding = 0) uniform image2D img_output;
// Structs
struct Sphere
{
	vec4 center;
	float radius;
	int material; // an index to a material in MaterialUniform 
};

struct HitInfo
{
	float t;
	vec4 normal;
	vec4 point;
	int material;
};

struct Material
{
	vec4 albedo;
	float refracIdx, refracIdxAir, blur;
	int type;
};

struct Ray
{
	vec4 origin;
	vec4 direction;
};

// Uniforms
layout(std140,row_major) uniform SphereUniform
{
	Sphere spheres[];
};

layout(std140,row_major) uniform MaterialUniform
{
	Material materials[];
};
//Constants 
const float pos_infinity = uintBitsToFloat(0x7F800000);
const float neg_infinity = uintBitsToFloat(0xFF800000);

//Globals
vec4 pixelPosition = vec4(0,0,-0.3,0); // Contains position of pixel in normalize -1 to 1 coordinates
ivec2 pixel_coords; // Contains position of pixerl in 0 to gl_NumWorkGroups-1

//Utility
float prev = 1;
float Rand(){ // from 0 to 1
    float res =  fract(sin(dot(pixel_coords, vec2(12.9898, 78.233))) * 43758.5453 + prev);
	prev = res;
	return res;
}
vec3 RandOutUnitSphere()
{
	vec3 p;
	do
	{
		p = 2.0 * vec3(Rand(), Rand(), Rand()) - vec3(1);
	} while (dot(p, p) >= 1.0f);
	return p;
}

bool Refract(inout vec3 incident,inout vec3 normal, const float ni_divby_nr,inout vec3 refracted)
{
	float dt = dot(incident, normal);
	float cy2 = 1.0f - ni_divby_nr * ni_divby_nr * (1.0f - dt * dt);
	if (cy2 > 0) {
		refracted = ni_divby_nr * (incident - normal * dt) - normal * sqrt(cy2);
		return true;
	}
	else
		return false;
}

vec4 PointTo(inout Ray r,float t) {return r.origin + r.direction*t;}

//Ray Funcs
vec4 GetRayColor(inout Ray ray)
{
	return vec4(1,0,1,1);
}

bool CheckRayHit(inout Ray ray, Sphere s,out HitInfo info, float tmin=0,float tmax=pos_infinity)
{
	vec4 oc = ray.origin - s.center;
	float a = dot(ray.direction, ray.direction);
	float b = dot(oc, ray.direction);
	float c = dot(oc, oc) - s.radius * s.radius;
	float delta = b * b - a * c;
	if (delta >= 0)
	{
	return true;
		float t = (-b - sqrt(delta)) / a; // The 2 in 2a cancels itself out
		if (tmin < t && t < tmax)
		{
			info.t = t;
			info.point = PointTo(ray,t);
			info.normal = (info.point - s.center) / s.radius;
			info.material = s.material;
			return true;
		}
		t = (-b + sqrt(delta)) / a;
		if (tmin < t && t < tmax)
		{
			info.t = t;
			info.point = PointTo(ray,t);
			info.normal = (info.point - s.center) / s.radius;
			info.material = s.material;
			return true;
		}
	}
	return false;
}

//Public fields
float radius;
vec3 center;


void main()
{
	pixel_coords = ivec2(gl_GlobalInvocationID.xy); // Get coords of pixel
	pixelPosition.xy = vec2(2*pixel_coords.x/float(gl_NumWorkGroups.x-1)-1,2*pixel_coords.y/float(gl_NumWorkGroups.y-1)-1);
	
	vec4 color = vec4(1);
	Ray ray;
	ray.origin = vec4(0,0,0,0);
	ray.direction = pixelPosition;
	
	Sphere sph;
	sph.radius = 1;
	sph.center = vec4(0,0,-3,0);
	sph.material = 1;

	HitInfo info;
	if(CheckRayHit(ray,sph,info))
	{
		color = vec4(1,0,1,1);
	}
	//if(float(spheres[0].radius) == 1)
	//	color = vec4(0,1,0,1);
	imageStore(img_output,pixel_coords,color);
}