#version 430
layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f,binding = 0) uniform image2D img_output;

struct Cam
{
	vec4 a;
	vec4 b;
	vec4 c;
};

layout(std140,row_major) uniform CameraBlock
{
	Cam cams[];	
};

//Globals
ivec2 pixel_coords;

//Utility
float Rand(){ // from 0 to 1
    return fract(sin(dot(pixel_coords, vec2(12.9898, 78.233))) * 43758.5453);
}
vec3 RandOutUnitSphere()
{
	vec3 p;
	do
	{
		p = 2.0 * vec3(Rand(), Rand(), Rand()) - vec3(1);
	} while (dot(p, p) >= 1.0f);
	return p;
}

bool Refract(inout vec3 incident,inout vec3 normal, const float ni_divby_nr,inout vec3 refracted)
{
	float dt = dot(incident, normal);
	float cy2 = 1.0f - ni_divby_nr * ni_divby_nr * (1.0f - dt * dt);
	if (cy2 > 0) {
		refracted = ni_divby_nr * (incident - normal * dt) - normal * sqrt(cy2);
		return true;
	}
	else
		return false;
}

void main()
{
	vec4 color = vec4(1,0,1,1);
	pixel_coords = ivec2(gl_GlobalInvocationID.xy); // Get coords of pixel
	color = cams[0].a;
	imageStore(img_output,pixel_coords,color);
}